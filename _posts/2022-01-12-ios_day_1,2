
for i in 0...99{
    i
}
for i in 0...99{
    print(i)
}

//상수:값의 변경이 불가능하다. ->전체공간
//let 상수명: 데이터타입=값
let a: Int=1000
a
//변수 ->사용공간에 사용될 수 있다.
//var 변수명:데이터 타입=값
var b:Int=300
b=400

//데이터 타입
//Int
//UInt:부호가 없는 정수형
//Float,Double,Bool,Character,String
//모든타입 지칭 ->Any

var someInt:Int=300
someInt

//부호 적으면 안된다.
var someUint:UInt=300
someUint=200

var someFloat:Float=1.1
someFloat=1
print(someFloat)

var someDouble:Double=1.1
someDouble=1
print(someDouble)

var someBool:Bool=true
someBool=false
print(someBool)

//이것도 가능하다. 처음에 초기화 안해줘도 가능하다.
var someCharacter:Character
someCharacter="A"
someCharacter="s"

var someString:String="안녕하세여"

//타입추론
var number=10

//타입추론(2)
var string="안녕~"
print(string)

//컬렉션 타입(중요):array,dictionary,set

//Array:var 변수명:Array<변수타입>=Array<변수타입>()
var numbers:Array<Int>=Array<Int>()
numbers.append(1)
numbers.append(2)
numbers.append(3)
numbers[0]
numbers[1]
//
numbers.insert(4,at:2)
numbers

numbers.remove(at:0)
numbers
//간단하게 적는 방법
var names:[String]=[]
var number_2:[Int]=[]
number_2.append(1)
number_2.append(2)
number_2.append(3)
//Dictionary
//var dic:Dictionary<String,Int>=Dictionary<String,Int>()
var dic:[String:Int]=[:]
dic["남궁광"]=28
dic["박성린"]=26
dic["김태현"]=24
dic
dic.removeValue(forKey:"남궁광")
dic
dic.removeValue(forKey:"박성린")
dic

//Set:축약형 표현이 없다.->암기 꼭하기
var set:Set=Set<Int>()
set.insert(10)
set.insert(10)
set.insert(20)
set.insert(30)
set
set.remove(20)
set

//함수는 작업의 가장 작은 단위이자 코드의 집합이다.
//func 함수명(파라미터이름 :데이터 타입)->반환타입{return 반환 값}

func sum(a:Int,b:Int)->Int{
    return a+b
}
sum(a:5,b:3)

func hello()->String{
    return "Hello jacky"
}

hello()


func greeting(friend:String,me:String="gunter")
{
    print("Hello,\(friend)! I'm \(me)")
}

greeting(friend:"Albert")

/*
 func 함수이름(전달인자 레이블:매개변수 이름: 매개변수 타입,전달인자 레이블: 매개변수 이름: 매개변수 타입...)->반환타입
 {
    return 반환 값
 }
 */
//변형코드 한번보기(위의 코드와 비슷하다)
func sendMessage(from name:String,to myname:String)
{
    print("Hello! \(name)! My name is \(myname) ")
}
sendMessage(from: "Qunter", to: "Json")


//조건문
//주어진 조건에 따라서 애플리케이션을 다르게 동작하도록 하는 것이다.
//if ,switch,guard

/*
 if 조건식{
    실행할 구문
 }
 */

//상수 선언
let age:Int=12

if age<19{
    print("미성년자 입니다.")
}

//
if age<19{
    print("미성년자 입니다.")
}
else{
    print("성년자")
}
//if -else if -else

let animal="cat"

if animal=="dog"{
    print("강아지 사료주기")
}
else if animal=="cat"
{
    print("고양이 사료주기")
}
else
{
    print("해당사료 없음.")
}
    
/*
 switch 비교대상
 {
    case 패턴1:
    //패턴1 일치할 때 실행되는 구문
    case 패턴2:
    //패턴2 일치할 때 실행되는 구문
    default:
    //어느 비교패턴과도 일치하지 않을 때 실행되는 구문
 }
 */

let color = "green"

switch color{
case "blue":
    print("파란색입니다.")
    
case "green":
    print("초록색입니다.")
    
case "yellow":
    print("노란색입니다.")
default:
    print("찾는 색상이 없습니다.")
}

let temperature:Int=30

switch temperature{
case -20...9:
    print("겨울입니다.")
case 10...14:
    print("가을입니다.")
case 15...25:
    print("봄입니다.")
case 26...35:
    print("여름입니다.")
    
default:
    print("이상기후입니다.")

}

//반복문:반복적으로 코드가 실행되게 만드는 구문을 말한다.

//for-in,while,repeat-while

/*
 for 루프상수 in 순회대산{
    실행구문..
 }
 */

for i in 1...4
{
    print(i)
}

let array=[1,2,3,4,5]
for i in array{
    print(i)
}

//false 될때까지 실행 되는 것은 while문이다.
var number_3=5

while number_3<10
{
    number_3+=1
}
number_3

//do while문이랑 같은 것 repeat while문이다.
/*
 repeat{
    //실행할 구문
 
 
 }while 조건식
 */
var x=6
repeat
{
    x+=2
}while x<5

print(x)

//옵셔널
//값이 있을수도 있고 없을 수도 있다.
var name:String? //닐이 들어가 있다.
var optionalName:String?="gunter"
print(optionalName)

//명시적 해제:강제 해제,비강제 해제(옵셔널 바인딩) ,묵시적 해제(컴파일러에 의한 자동 해제,옵셔널의 묵시적 해제)
//var requiredname:String=optionalName
var number_5:Int?=3
print(number_5)
//느낌표로 강제로 바인딩을 해제하지만 nil이들어가있을 때는 치명적 오류를 만들어 낼 수있다.
print(number_5!)

//비강제로 바인딩을 해제해보겠다
if let result=number_5{
    print(result)
    
}
else{
    
}
//guard문으로 옵션널을 품
func test(){
    let numberr:Int?=5
    guard let result=numberr else {return}
    print(result)
}
test()

let value_2:Int? = 6
if value_2==6{
    print("value가 6입니다.")
}
else{
    print("value가 6이아닙니다.")
}

//묵시적 해제
let string_2 = "12"
var stringToInt:Int!=Int(string_2)
print(stringToInt+1)

//클래스와 구조체 : 참조 타입/값 타입
//구조체
//struct 구조체이름
//{
//    프로퍼티와 메서드
//}

struct User{
    var nickname:String
    var age:Int
    
    func infornamtion(){
        print("\(nickname) \(age)")
    }
}
    
    

//인스턴스 생성
//var user=User(nickname:"jacky", age:23)
//user.nickname
//user.nickname="taehyeon"
//user.nickname
//user.infornamtion()


//클래스
//class 클래스이름{
//    프로퍼티와 메서드
//}

class User_2{
    var nickname:String=""
    var age:Int=0
    //안만들면 자동으로 생성자가 생김
    //구조체도 같은 방식으로 생성이 된다.
    init(nickname:String,age:Int){
        self.nickname=nickname
        self.age=age
        
    }
    
    init(age:Int)
    {
        self.nickname="ablert"
        self.age=age
    }
    
    deinit{
        print("deinit이호출됬당")
    }
    
    func introduce(){
        print("name \(nickname) age \(age)")
        
    }
}
//초기화 선언안하면 이렇게 하자.
//var dog=Dog()
//dog.name="CoCo"
//dog.age=3
//dog.name
//dog.age
//dog.introduce()

//초기화 했을 때
var user=User_2(nickname:"jacky", age:23 )

user.nickname
user.age

var user2=User_2(age: 29)
user2.nickname
user2.age

var user3:User_2? = User_2(age:23)
user3=nil


//프로퍼티:클래스,구조체 또는 열겨형 등에 관련된 값을 뜻한다.
//저장 프로퍼티, 연산 프로퍼티, 타입 프로퍼티
//저장 프로퍼티

struct Dog_2{
    var name:String
    let gender:String
}

var dog=Dog_2(name:"jacky",gender: "male")
print(dog)

dog.name="재키"
//안되는 것 왜냐? let써서
//dog.gender="female"
//구조체도 let으로 선언하면 인스턴스 다 바꾸는 것이 불가능 하다.

class Cat{
    var name:String
    let gender:String
    
    init(name:String,gender:String)
    {
        self.name=name
        self.gender=gender
    }
}
//class 는 참조타입이라 let으로 표현해도 된당.
let cat=Cat(name:"yomi",gender:"male")

cat.name="gunter"
print(cat.name)

//계산 프로퍼티
struct Stock{
    var averagePrice:Int
    var quantity:Int
    var purchasePrice:Int{
        get{
            return averagePrice*quantity
        }
        
        set(newPrice)//만약 newPrice를 안적으면 newValue로 대신 적어도된다.
        {
            averagePrice=newPrice/quantity
        }
    }
}

var stock = Stock(averagePrice: 2300, quantity: 3)
print(stock)
stock.purchasePrice
stock.purchasePrice=3000
stock.purchasePrice
stock.averagePrice

class Account{
    var credit:Int=0
    {
        //실행되기 직전
        willSet{
            print("잔액이 \(credit)원에서 \(newValue)원으로 변경될 예정입니다.")
        }
        //실행된 직후
        didSet{
            print("잔액이 \(oldValue)원에서 \(credit)원으로 변경되었습니다.")
        }
    }
}

var account=Account()
account.credit=1000

//타입 프로퍼티
struct SomeStructure{
    static var storedTypeProperty="Some value"//스토어
    static var computedTypeProperty:Int{
        return 1
    }
}

SomeStructure.computedTypeProperty
SomeStructure.storedTypeProperty

SomeStructure.storedTypeProperty="hello"
SomeStructure.storedTypeProperty


//클래스와 구조체의 공통점/차이점
/* 공통점
-값을 저장할 프로퍼티를 선얼할 수 있다.
-함수적 기능을 하는 메서드를 선언할 수 있다.
-내부 값에 .을 사용하여 접근할 수 있다.
-생성자를 사용해 초기 상태를 설정할 수 있다.
-extension을 이용하여 기능을 확장할 수 있습니다.(나중에)
-Protocol을 채택하여 기능을 설정할 수 있다.
 */

/* 차이점
클래스:
 참조타입,ARC로 메모리를 관리, 상속이 가능, 타입 캐스팅을 통해 런타임에서 클래스 인스턴스의 타입을 확인 할수 있음.
 deinit을 사용하여 클래스 인스턴스의 메모리 할당을 해제할 수 있음.
 같은 클래스 인스턴스를 여러 개의 변수에 할당한 뒤 값을 변경 시키면 모든 변수에 영향을 줌(메모리가 복사 됨)
 -힙영역과 관련
 
구조체:
 값타입,구조체 변술르 새로운 변수에 할당할 때마다 새로운 구조체가 할당됩니다.
 즉 같은 구조체를 여러개의 변수에 할당한 뒤 값을 변경시키더라도 다른 변수에 영향을 주지않음(값 자체를 복사)
 -스택과 관련
 */
class SomeClass{
    var count:Int=0
}

struct SomeStruct{
    var count:Int=0
}

var class1=SomeClass()
var class2=class1
var c1ass3=class1

c1ass3.count = 2
class1.count




var struct1=SomeStruct()
var struct2=struct1
var struct3=struct1

struct2.count = 1
struct3.count = 2


struct1.count
struct2.count
struct3.count


//상속:부모가 자식에게 재산을 물려주는 행위(클래스사이에 이루어 지는 것)

class Vehicle{
    //final은 재정의 불가능하다.
    //final var currentSpeed=0.0
    var currentSpeed=0.0
    var description:String{
        return "traveling at \(currentSpeed) miles per hour"
    }
    
    func makeNoise()
    {
        print("speaker on")
    }
}

/*
 class 클래스 이름: 부모클래스 이름{
    //하위 클래스 정의
}
 */
class Bicycle: Vehicle {
    var hasBasket = false
}

var bicycle = Bicycle()

bicycle.currentSpeed
bicycle.currentSpeed=15.0
bicycle.currentSpeed

//오버라이딩:덮어 씌우기 라고 생각하자 -> 같은 기능인데 다르게 실행하기 위해서
//만약 덮어씌운거 안쓰고 싶으면 super쓰면된다.
class Train:Vehicle{
    override func makeNoise() {
        super.makeNoise()
        print("choo choo")
    }
}

let train = Train()
train.makeNoise()


class Car: Vehicle{
    var gear = 1
    override var description: String{
        return super.description + "in gear \(gear) "
    }
}

let car = Car()
car.currentSpeed = 30.0
car.gear = 2
print(car.description)

class AutomaticCar: Car{
    override var currentSpeed: Double{
        didSet{
            gear = Int(currentSpeed / 10) + 1
        }
    }
}
let automatic = AutomaticCar()
automatic.currentSpeed = 35.0
print("AutomaticCar: \(automatic.description)")

//타입 캐스팅
/*
 인스턴스의 타입을 확인하거나 어떠한 클래스의 인스턴스를 해당 클래스 계층 구조의 슈퍼 클래스나 서브 클래스로 취급하는 방법
 is, as 를 이용하면 된다.
 */

class MediaItem{
    var name:String
    init(name:String)
    {
        self.name = name
    }
}

class Movie: MediaItem{
    var director: String
    init(name: String,director: String)
    {
        self.director = director
        super.init(name: name)
    }
}

class Song: MediaItem{
    var artist: String
    init(name:String,artist:String){
        self.artist=artist
        super.init(name: name)
    }
}

let library = [
    Movie(name:"기생충",director: "봉준호"),
    Song(name:"Butter",artist: "BTS"),
    Movie(name:"올드보이",director: "박찬욱"),
    Song(name:"Wonderwall",artist: "Oasis"),
    Song(name:"Rain",artist: "이적")
]


var movieCount = 0
var songCount = 0

for item in library{
    if item is Movie{
        movieCount += 1
    }else if item is Song{
        songCount += 1
    }
}

print("Media library contains \(movieCount) movies and \(songCount) songs")
//형변환: 다운 케스팅이용

for item in library {
    if let movie = item as? Movie{
        print("Movie: \(movie.name),dir. \(movie.director)")
    }else if let song = item as? Song{
        print("Song: \(song.name),by \(song.artist)")
    }
}
    
